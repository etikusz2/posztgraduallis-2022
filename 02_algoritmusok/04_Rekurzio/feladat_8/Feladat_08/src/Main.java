import java.util.Stack;

public class Main {
    // Egy olyan vil√°gban mozgunk, ahol a koordin√°t√°k eg√©sz sz√°mok.
    // √âs utazni csak egy fura szab√°ly szerint lehet.
    // Egy (ùë•, ùë¶) koordin√°t√°j√∫ pontb√≥l csak az (ùë•, ùë• + ùë¶) √©s az (ùë• + ùë¶, ùë¶) koordin√°t√°kra lehet mozogni.
    //√çrjon egy f√ºggv√©nyt, ami eld√∂nti, egy indul√°si √©s egy √©rkez√©si koordin√°tap√°rr√≥l,
    // hogy az √©rkez√©si pont el√©rhet≈ë-e az indul√°si helyr≈ël.
    //Pl.: indul√°si hely (2,10), √©rkez√©si hely (26,12) eset√©n (2, 10) ‚Üí (2, 12) ‚Üí (14, 12) ‚Üí (26, 12)
    // egy megengedett √∫tvonal. Indul√°si hely (2,10), √©rkez√©si hely (15,16) eset√©n nincs ilyen √∫tvonal.
    // (B√≥nusz: √≠rja is ki a l√©p√©sek sorozat√°t. Visszafel√© egyszer≈±bb, el≈ëre kicsit bonyolultabb.)
    public static void main(String[] args) {
        int xIndulas = 2;
        int yIndulas = 10;
        int xErkezes = 26;
        int yErkezes = 12;
        UtvonalKiirasa(xIndulas, yIndulas, xErkezes, yErkezes);
    }

    private static boolean ElerhetoE(int xIndulas, int yIndulas, int xErkezes, int yErkezes) {
        Stack<Integer> xInd = new Stack<Integer>();
        Stack<Integer> yInd = new Stack<Integer>();
        return Utvonal(xIndulas, yIndulas, xErkezes, yErkezes, xInd, yInd);
    }

    static boolean Utvonal(int xIndulas, int yIndulas,
                           int xErkezes, int yErkezes,
                           Stack<Integer> xInd, Stack<Integer> yInd)
    {
        // Base condition
        if (xIndulas > xErkezes || yIndulas > yErkezes) {
            return false;
        }

        // Push current elements
        xInd.add(xIndulas);
        yInd.add(yIndulas);

        // Condition to check whether reach to the
        // Destination or not
        if (xIndulas == xErkezes && yIndulas == yErkezes) {
            LetezoUtvonalKiirasa(xInd, yInd, xInd.size());
            return true;
        }

        // Increment 'x' ordinate of source by (2*x+y)
        // Keeping 'y' constant
        if (Utvonal(xIndulas + yIndulas, yIndulas,
                xErkezes, yErkezes, xInd, yInd))
        {
            return true;
        }

        // Increment 'y' ordinate of source by (2*y+x)
        // Keeping 'x' constant
        if (Utvonal(xIndulas, yIndulas + xIndulas,
                xErkezes, yErkezes, xInd, yInd))
        {
            return true;
        }

        // Pop current elements form stack
        xInd.pop();
        yInd.pop();

        // If no path exists
        return false;
    }

    private static void LetezoUtvonalKiirasa(Stack<Integer> xInd, Stack<Integer> yInd, int utolsolepes) {
        if (xInd.isEmpty() || yInd.isEmpty())
            return;
        int x = xInd.peek();
        int y = yInd.peek();
        LetezoUtvonalKiirasa(xInd, yInd, utolsolepes);
        if (xInd.size() == utolsolepes - 1)
            System.out.println("(" + x + ", " + y + ")");
        else
            System.out.println("(" + x + ", " + y + ")" + " -> ");
    }

    private static void UtvonalKiirasa(int xIndulas, int yIndulas, int xErkezes, int yErkezes) {
        if (!ElerhetoE(xIndulas, yIndulas, xErkezes, yErkezes))
            System.out.println("Nincs ilyen utvonal");
    }
}